import org.gradle.internal.os.OperatingSystem

plugins {
    id 'net.ltgt.errorprone' version '0.0.8'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.4'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext.buildArm = !project.hasProperty('skipArm')
ext.includeJava = !project.hasProperty('skipJava')

if (hasProperty('makeDesktop')) {
    println 'Making desktop classifier jar. NOTE: This desktop version should only be used for local testing.' +
            'It will only support the current platform, and will override fetching the latest development version from' +
            ' the maven repo until you manually delete it!'
}

ext.getPlatformPath2 = { targetPlatform ->
    if (targetPlatform.architecture.arm) {
        return 'Linux/arm'
    } else if (targetPlatform.operatingSystem.linux) {
        if (targetPlatform.architecture.amd64) {
            return 'Linux/amd64'
        } else {
            return 'Linux/' + targetPlatform.architecture.name
        }
    } else if (targetPlatform.operatingSystem.windows) {
        if (targetPlatform.architecture.amd64) {
            return 'Windows/amd64'
        } else {
            return 'Windows/' + targetPlatform.architecture.name
        }
    } else if (targetPlatform.operatingSystem.macOsX) {
        if (targetPlatform.architecture.amd64) {
            return 'Mac OS X/x86_64'
        } else {
            return 'Mac OS X/' + targetPlatform.architecture.name
        }
    } else {
        return targetPlatform.operatingSystem.name + '/' + targetPlatform.architecture.name
    }
}

ext.getPlatformPath = { binary ->
    return getPlatformPath2(binary.targetPlatform)
}

ext.useWpiUtil = { project ->
    project.tasks.create(name: "downloadWpiUtil") {
        description = 'Downloads the C++ ARM wpiutil maven dependency.'
        group = 'WPILib'
        def depFolder = "${project.buildDir}/dependencies"
        def utilZip = file("${depFolder}/wpiutil.zip")
        outputs.file(utilZip)
        def armWpiUtil

        doFirst {
            def armWpiUtilDependency = project.dependencies.create("edu.wpi.first.wpilib:wpiutil:+:${project.isArm ? 'arm' : 'desktop'}@zip")
            def armWpiUtilConfig = project.configurations.detachedConfiguration(armWpiUtilDependency)
            armWpiUtilConfig.setTransitive(false)
            armWpiUtil = armWpiUtilConfig.files[0].canonicalFile
        }

        doLast {
            copy {
                from armWpiUtil
                rename 'wpiutil(.+)', 'wpiutil.zip'
                into depFolder
            }
        }
    }

    def wpiUtilUnzipLocation = "${project.buildDir}/wpiutil"

    // Create a task that will unzip the wpiutil files into a temporary build directory
    project.tasks.create(name: "unzipWpiUtil", type: Copy) {
        description = 'Unzips the wpiutil maven dependency so that the include files and libraries can be used'
        group = 'WPILib'
        dependsOn project.tasks.downloadWpiUtil
        from zipTree(project.tasks.downloadWpiUtil.outputs.files.singleFile)
        into wpiUtilUnzipLocation
    }

    project.ext.wpiUtil = wpiUtilUnzipLocation
    project.ext.wpiUtilInclude = "$wpiUtilUnzipLocation/include"

    project.ext.addWpiUtilStaticLibraryLinks = { compileTask, linker, targetPlatform ->
        compileTask.dependsOn project.tasks.unzipWpiUtil
        String path = project.getPlatformPath2(targetPlatform)
        if (targetPlatform.operatingSystem.windows) {
            linker.args "${project.wpiUtil}/${path}/wpiutil.lib"
        } else {
            linker.args "${project.wpiUtil}/${path}/libwpiutil.a"
        }
    }
    
    project.ext.addWpiUtilSharedLibraryLinks = { compileTask, linker, targetPlatform ->
        compileTask.dependsOn project.tasks.unzipWpiUtil
        String path = project.getPlatformPath2(targetPlatform)
        if (targetPlatform.operatingSystem.windows) {
            linker.args "${project.wpiUtil}/${path}/wpiutil.dll"
        } else {
            linker.args "${project.wpiUtil}/${path}/libwpiutil.so"
        }
    }
}

ext.setupDefines = { project, binaries ->
    binaries.all {
	if (project.hasProperty('debug')) {
	    project.setupDebugDefines(cppCompiler, linker)
	} else {
	    project.setupReleaseDefines(cppCompiler, linker)
	}
        tasks.withType(CppCompile) {
            if (project.hasProperty('compilerPrefix') && project.targetPlatform.arm) {
                project.addWpiUtilSharedLibraryLinks(it, linker, targetPlatform)
            } else {
                project.addWpiUtilStaticLibraryLinks(it, linker, targetPlatform)
            }
        }
    }
}

apply from: "ntcore.gradle"

// Empty task for build so that ntcoreSourceZip will be built when running
// ./gradlew build
task build

build.dependsOn ntcoreSourceZip

apply from: 'publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
